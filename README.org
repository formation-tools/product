:PROPERTIES:
:CUSTOM_ID: formation.tools/product-vision
:END:
#+title: Product Vision formation.tools

* Goal

üéØ Facilitate *joyful collaboration* and efficient *knowledge sharing* between teams in tech startups that may be *in the office or on-the-go*.

- joyful collaboration
  - snappy tooling (facilitate the speed of thought)
  - clear overview (to simplify recall)
  - clear ownership (to allow teams to know who to loop in for clarification or for review, grant teams to tools to grant owners observability over changes within their owned scope)
  - effective recall (erradicate /information graveyards/)
  - pleasant to use
    - playful element?
    - gamification? üéÆ
    - make users want to use this
  - why
    - current tooling is frustrating to use
    - current tooling is slow
    - current tooling feels like a chore
    - current tooling is proprietary and locks users in
    - *fun work is done work* ‚≠ê
- knowledge sharing
  - wiki-like
  - FAQ-like, leveraging QA tooling
  - knowledge graph-like to present visual hierarchies of information for faster navigation

** Competitive Landscape

Ranked in order of how close they are to solving the problem our way (top is closer, lower is further away)!

| Competitor | Killer feature   | Missing feature                                                                   |
|------------+------------------+-----------------------------------------------------------------------------------|
| [[https://www.archbee.io/integrations][Archbee]]    |                  | Org-capabilities (tasks, planning, productivity)                                  |
| Notion     | mobile-firstness | openness (proprietary formats, complex API with /block/ as primitive entity)      |
| Confluence | Jira             | openness (API is horrible, centralized)                                           |
| Org        | Emacs            | inaccessible to non-Emacs users, too flexible when you start tinkering with elisp |
|            |                  |                                                                                   |


* Vision Statement

For *smaller tech startups* where information management and knowledge management are key to success, who need to *maintain an overview over knowledge-work and coordinate work between disciplines*, the =formation.tools= platform is a /productivity, collaboration and knowledge-management/ suite that is *API-centric, ChatOps-centric and plaintext-centric*.

** Why's

- why *smaller tech startups*?
  - already familiar with change management (for their code)
  - existential need to ace their "information game"
  - already familiar with git
- why *API-centric*?
  - all features should accessible through a public API
    - to simplify integrations with other systems (in the spirit of *open systems*)
  - users and customers should be enabled to tie the solution into their own tooling
  - *good tools make their use easy* ‚≠ê
    - support or guidance needs to be unnecessary (good lithmus test) or built-in
- why *ChatOps-centric*?
  - all features should be accessible through chat because of accessibility
  - many folks will not have access to their forge or wiki on the go, but they will have access to their chat tool -- work can't be accessible to those behind computers only, it's 2022+ ü§∑üèø‚Äç‚ôÇÔ∏è
- why *plaintext-centric*
  - everything should be editable as plaintext
    - trackable in git
      - *distributed* version management
        - derisks data loss
        - provides historic context
      - history with *traceability* of who contributed which segment of the text (i.e.: git-blame, relates to /provenance/)
        - clear path towards rolling back to previous state
      - familiar, *tried and tested paradigm* for distributed change management
      - facilitates more *explicit approval processes* that are akin to merge processes (think: PR's) -- more documents should be written this way
  - stick to *Org and Markdown* as much as possible
    - existing standards
    - leverage and supercharge that which is already there ‚≠ê
      - don't add to the problem by introducing new standards
    - easy to read (almost WYSIWYG)
    - Org allows for *productivity* workflows that are underleveraged

* Customer

Tech startups where engineers, product and business folks need short input-to-output cycles on knowledge-management in the area of numbers (data), copy (text, prose) and designs (graphs, diagrams).

Tech startups need to draft and maintain a variety of documents product that may be either of the following:
- product vision and strategy briefs
- product design documents
- technical design documents (ADRs, technical architecture, coding guidelines, review guidelines/playbooks, coding reference material, configuration and release management briefs, security guidelines, READMEs, etc.)
- HR briefs (company manuals, culture handbooks, appraisal formats, etc.)

* User

- those who need to document information for their future selves and colleagues
  - answering questions
- those who need information on a particular company-specific topic
  - asking questions

** Example

Engineers documenting in repository READMEs, product folks documenting in [Confluence or alt ü§¨] and business folks documenting in spreadsheets versioned by file prefixes üò≠ is a collaboration paradigm where too much uncertainty exists about the notion of a /source of truth/ leading to the following question:
- Is the spreadsheet I'm looking at autoritative?
- What is data based on or derived from?
- When was it last refreshed/retrieved?
- Who has redacted this data over time?
- What is the narrative around the data that may not fit within the rigid structure of the format chosen?

* TODO Value Proposition

* TODO Product Objectives

Tools to enable and foster collaboration between people.

* TODO Definitions
:PROPERTIES:
:CUSTOM_ID: definitions
:END:

- communication
- intel
- relations
